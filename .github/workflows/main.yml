name: decathlon-bikes_automacao
run-name: ${{ github.actor }} Pipeline deploy
on:
  push:
    branches:
      - "develop"
    paths:
      - '**/*.jpg'  # Define o padrão para arquivos de imagem (JPEG)
      - '**/*.jpeg' # Outro padrão comum para arquivos de imagem
      - '**/*.png'  # PNG
      - '**/*.gif'  # GIF
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        if: always()
        uses: actions/checkout@v2
          
      - name: INSTALL PACKAGES
        if: always()
        run: |
          sudo apt update -y
          wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
         
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update -y
          sudo apt install unzip terraform ssh -y

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS CLI
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Test aws cli
        if: always()
        run: aws sts get-caller-identity
      
      - name: Terraform Apply
        if: always()
        run: |
          terraform init
          terraform apply --auto-approve

      - name: Obter IPs públicos das instâncias EC2
        if: always()
        id: get-ec2-ips
        run: |
          EC2_IPS=$(terraform output -json instance_ips | jq -r '.[]')
          echo "IPs públicos das instâncias EC2: $EC2_IPS"
          echo "::set-output name=ec2_ips::$EC2_IPS"

      - name: Copiar arquivo para EC2
        if: always()
        run: |
          # Variáveis de ambiente para autenticação SSH
          export SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}"  # Chave privada SSH armazenada no GitHub Secrets
          export SSH_USER="ec2-user"  # Substitua pelo usuário SSH da sua instância EC2
          EC2_IPS="${{ steps.get-ec2-ips.outputs.ec2_ips }}"  # Obtém os endereços IP das instâncias EC2 a partir da etapa anterior
          # Criar arquivo temporário para armazenar a chave privada
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Copiar arquivo para as instâncias EC2
          for EC2_IP in $EC2_IPS; do
            scp -i ~/.ssh/id_rsa key.txt $SSH_USER@$EC2_IP:/mnt/efs/  # Substitua "seu_arquivo.txt" pelo nome do arquivo e "/caminho/destino/" pelo caminho de destino na instância EC2



          
